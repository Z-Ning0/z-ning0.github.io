---
layout:       post
title:        "JavaScript事件循环机制详解"
subtitle:     "深入解析Event Loop与异步执行原理"
data:         2025-07-02 13:30:00
author:       "ZNing"
header-style: text
catalog:      true
tags:
    - Web
    - JavaScript
---

本文将深入探讨JavaScript的事件循环机制，这是理解异步编程的核心概念。

## 一、为什么需要事件循环？
JavaScript作为单线程语言，通过事件循环实现非阻塞I/O操作。核心组件包括：
- 调用栈（Call Stack）
- 任务队列（Task Queue）
- 微任务队列（Microtask Queue）

## 二、执行流程解析
1. **同步任务**：直接进入调用栈执行
2. **异步任务**：
   - 宏任务（setTimeout/setInterval）
   - 微任务（Promise.then）
3. 事件循环处理顺序：
```javascript
console.log('Start');

setTimeout(() => console.log('Timeout'), 0);

Promise.resolve()
  .then(() => console.log('Promise'));

console.log('End');

// 输出顺序：
// Start → End → Promise → Timeout
